import os, mysql.connector
import locale, prettytable
import cutie
import random, calendar
from datetime import *

locale.setlocale(locale.LC_ALL, 'en_IN')
loggedIN = False
orgData = ""
msg = ""

def cls():
    os.system("cls")

def format_string(val):
    return locale.format_string("%d", val, grouping=True)

try:
    mydb = mysql.connector.connect(
        host="localhost",
        user="root",
        password="abhinav07"
    )
    mycursor = mydb.cursor()
    mycursor.execute("CREATE DATABASE IF NOT EXISTS finex")
    mycursor.execute("USE finex")
    mycursor.execute("CREATE TABLE IF NOT EXISTS orgs (orgID int primary key, orgName varchar(30), orgAddress varchar(500), orgEmail varchar(100), orgPassword varchar(500))")
    mycursor.execute("CREATE TABLE IF NOT EXISTS coa (orgID int, account_name varchar(50) NOT NULL, category char(1) NOT NULL, PRIMARY KEY (orgID,account_name))")
    mycursor.execute("CREATE TABLE IF NOT EXISTS journal (orgID int, trx_date date, debit_account varchar(50), credit_account varchar(50), narration varchar(5000), amount float, trx_id int)")
    mycursor.execute("CREATE TABLE IF NOT EXISTS fixed_assets (orgID int, account_name varchar(50), ls int, method char(3), pp float, dep float, dp date)")
except:
    print("There was a problem with the MySQL server")
    exit()

print("Welcome to Finex\nDeveloped by ASA Finserve\n")

options = ["Login", "Signup", "About", "Exit"]
while True:
    option = options[cutie.select(options)]
    if option=="Signup":
        cls()
        orgID = random.randint(10000,99999)
        mycursor.execute(f"SELECT orgID from orgs where orgID={orgID}")
        myresult = mycursor.fetchall()
        if myresult!=[]:
            orgID = random.randint(10000,99999)
        orgName = input("Enter your organisation's name")
        orgAddress = input("Enter your organisation's registered address \n(This will be used in the header of various reports generated by Finex)\n")
        orgEmail = input("Enter your organisation's email ID (This is used for auto sending of reports)")
        orgPassword = cutie.secure_input("Enter a secure password for this organisation")
        length = len(orgPassword)
        mycursor.execute(f"SELECT md5('{orgPassword}')")
        myresult = (mycursor.fetchall()[0])
        for password in myresult:
            orgPassword=password
        mycursor.execute(f"INSERT INTO orgs VALUES({orgID}, '{orgName}', '{orgAddress}', '{orgEmail}', '{orgPassword}')")
        mydb.commit()
        cls()
        print(f"Success! Your organisation {orgName} has been added successfully. Please remember your Organisation ID and Password carefully\nOrganisation ID : {orgID}\nPassword : ", end="")
        print("*"*length)
        continue
    elif option=="Login":
        cls()
        orgID = int(input("Enter your Organisation ID"))
        mycursor.execute(f"SELECT * from orgs where orgID={orgID}")
        orgData = mycursor.fetchall()
        if orgData==[]:
            print("Invalid Organisation ID")
            continue
        else:
            password = cutie.secure_input("Enter your password")
            mycursor.execute(f"SELECT md5('{password}')")
            myresult = (mycursor.fetchall()[0])
            if (orgData[0][4])==(myresult[0]):
                loggedIN = True
                break
            else:
                print("Incorrect password")
                continue

    elif option=="About":
        cls()
        print("Finex\nAn accounting software created by ASA Finserve to help businesses of any size manage their day-to-day transactions easily.\n")
        continue
    else:
        exit()
cls() 
print()
while True:
    print(f"Welcome back, {orgData[0][1]}")
    options = ["Journal", "Ledger & Accounts", "Financial Reports", "Fixed Assets Management", "Settings", "Exit"]
    option = options[cutie.select(options)]
    if option=="Ledger & Accounts":
        cls()
        mycursor.execute(f"SELECT account_name from coa where orgID={orgData[0][0]}")
        myresult=mycursor.fetchall()
        if myresult==[]:
            print("You have not created any accounts. Create an account to access Journal and Ledger")
            try:
                account_name = input("Enter the name of the account. Press CTRL+C to quit")
                list_of_assets = ["Machinery", "Land", "Building", "Land & Building", "Plant", "Plant & Machinery", "Furniture", "Vehicles"]
                if account_name in list_of_assets:
                    print("You are trying to add a Fixed Asset. We recommend that you add it through the Fixed Assets Management, so that your asset can automatically be depreciated at the year-end. You can also easily have features for disposal of the asset")
                    ch = cutie.prompt_yes_or_no("Are you sure you wish to continue? ")
                    print(ch)
            except:
                continue
            options = ["Asset", "Liability", "Income", "Capital", "Expense"]
            classification = options[cutie.select(options)]
            if classification=="Asset":
                classification="A"
            elif classification=="Liability":
                classification="L"
            elif classification=="Income":
                classification="I"
            elif classification=="Capital":
                classification="C"
            else:
                classification="E"
            mycursor.execute(f"INSERT INTO coa VALUES({orgData[0][0]}, '{account_name}', '{classification}')")
            mydb.commit()
            cls()
            msg = "Account created successfully"
        else:
            print("Select an account")
            account_list = []
            for account in myresult:
                account_list.append(account[0])
            account_list.append("Create a new account")
            accounts = account_list[cutie.select(account_list)]
            if accounts=="Create a new account":
                cls()
                try:
                    account_name = input("Enter the name of the account. Press CTRL+C to quit")
                    list_of_assets = ["Machinery", "Land", "Building", "Land & Building", "Plant", "Plant & Machinery", "Furniture", "Vehicles"]
                    if account_name in list_of_assets:
                        print("You are trying to add a Fixed Asset. We recommend that you add it through the Fixed Assets Management, so that your asset can automatically be depreciated at the year-end. You can also easily have features for disposal of the asset")
                        ch = cutie.prompt_yes_or_no("Are you sure you wish to continue? ")
                        if ch==True:
                            print("Ok")
                            
                        else:
                            pass

                except KeyboardInterrupt:
                    exit()
                options = ["Asset", "Liability", "Income", "Capital", "Expense"]
                classification = options[cutie.select(options)]
                if classification=="Asset":
                    classification="A"
                elif classification=="Liability":
                    classification="L"
                elif classification=="Income":
                    classification="I"
                elif classification=="Capital":
                    classification="C"
                else:
                    classification="E"
                mycursor.execute(f"INSERT INTO coa VALUES({orgData[0][0]}, '{account_name}', '{classification}')")
                mydb.commit()
                cls()
                print("Account created successfully")
            else:
                cls()
                t = prettytable.PrettyTable()
                t.field_names=["Date", "Particulars", "Dr. Amount", "Cr. Amount"]
                mycursor.execute(f"select distinct MonthNAME(trx_date) as month, YEAR(trx_date) as Year, month(trx_date) from journal where debit_account='{accounts}' or credit_account='{accounts}'")
                myresult=mycursor.fetchall()
                print(f"Select Time Period for viewing transactions of {accounts} account. You can select multiple months by pressing SPACE BAR")
                option = ["Today", "Yesterday", "This Week", "This Month", "This Quarter", "Last Quarter", "Last Month", "Calender Year till date", "Accounting Year till date", "Custom Range"]
                options = option[cutie.select(option)]
                if options=="Today":
                    ori_sum_debit=ori_sum_credit=0
                    todayDate = date.today()
                    t.title=f"{accounts} Account from {todayDate} to {todayDate}"
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{accounts}' or credit_account='{accounts}') and (trx_date<'{todayDate}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        for trx in myresult:
                            if trx[1]==accounts:
                                ori_sum_debit+=trx[4]
                            else:
                                ori_sum_credit+=trx[4]
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{accounts}' or credit_account='{accounts}') and (trx_date='{todayDate}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        sum_debit, sum_credit = 0, 0
                        if ori_sum_debit>ori_sum_credit and ori_sum_credit!=0:
                            t.add_row(["", "Balance b/d", format_string(ori_sum_debit-ori_sum_credit), ""], divider=True)
                            sum_debit+=ori_sum_debit-ori_sum_credit
                        elif ori_sum_credit>ori_sum_debit and ori_sum_credit!=0:
                            t.add_row(["", "Balance b/d", "", format_string(ori_sum_credit-ori_sum_debit)], divider=True)
                            sum_credit+=ori_sum_credit-ori_sum_debit
                        for trx in myresult:
                            if trx[1]==accounts:
                                t.add_row([trx[0], trx[2], format_string(int(trx[4])), ""])
                                sum_debit+=trx[4]
                                pass
                            else:
                                t.add_row([trx[0], trx[1], "", format_string(int(trx[4]))])
                                sum_credit+=trx[4]
                                pass
                        if sum_debit>sum_credit:
                            t.add_row(["", "Balance c/d", "", format_string(sum_debit-sum_credit)], divider=True)
                            t.add_row(["", "Total", format_string(sum_debit), format_string(sum_debit)])
                            
                        elif sum_debit<sum_credit:
                            t.add_row(["", "Balance c/d", format_string(sum_credit-sum_debit), ""], divider=True)
                            t.add_row(["", "Total", format_string(sum_credit), format_string(sum_credit)])
                        
                        else:
                            t.add_row(["", "", "", ""], divider=True)
                            t.add_row(["", "", format_string(sum_debit), format_string(sum_credit)])
                    else:
                        if ori_sum_debit>ori_sum_credit:
                            t.add_row(["", "Balance c/d", "", format_string(ori_sum_debit-ori_sum_credit)], divider=True)
                        else:
                            t.add_row(["", "Balance c/d", format_string(ori_sum_credit-ori_sum_debit), ""], divider=True)
                    cls()
                    print(t)
                elif options=="Yesterday":
                    ori_sum_debit=ori_sum_credit=0
                    td = date.today()
                    todayDate = td-timedelta(days=1)
                    t.title=f"{accounts} Account from {todayDate} to {todayDate}"
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{accounts}' or credit_account='{accounts}') and (trx_date<'{todayDate}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        for trx in myresult:
                            if trx[1]==accounts:
                                ori_sum_debit+=trx[4]
                            else:
                                ori_sum_credit+=trx[4]
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{accounts}' or credit_account='{accounts}') and (trx_date='{todayDate}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        sum_debit, sum_credit = 0, 0
                        if ori_sum_debit>ori_sum_credit and ori_sum_credit!=0:
                            t.add_row(["", "Balance b/d", format_string(ori_sum_debit-ori_sum_credit), ""], divider=True)
                            sum_debit+=ori_sum_debit-ori_sum_credit
                        elif ori_sum_credit>ori_sum_debit and ori_sum_credit!=0:
                            t.add_row(["", "Balance b/d", "", format_string(ori_sum_credit-ori_sum_debit)], divider=True)
                            sum_credit+=ori_sum_credit-ori_sum_debit
                        for trx in myresult:
                            if trx[1]==accounts:
                                t.add_row([trx[0], trx[2], format_string(int(trx[4])), ""])
                                sum_debit+=trx[4]
                                pass
                            else:
                                t.add_row([trx[0], trx[1], "", format_string(int(trx[4]))])
                                sum_credit+=trx[4]
                                pass
                        if sum_debit>sum_credit:
                            t.add_row(["", "Balance c/d", "", format_string(sum_debit-sum_credit)], divider=True)
                            t.add_row(["", "Total", format_string(sum_debit), format_string(sum_debit)])
                            
                        elif sum_debit<sum_credit:
                            t.add_row(["", "Balance c/d", format_string(sum_credit-sum_debit), ""], divider=True)
                            t.add_row(["", "Total", format_string(sum_credit), format_string(sum_credit)])
                        
                        else:
                            t.add_row(["", "", "", ""], divider=True)
                            t.add_row(["", "", format_string(sum_debit), format_string(sum_credit)])
                    else:
                        if ori_sum_debit>ori_sum_credit:
                            t.add_row(["", "Balance c/d", "", format_string(ori_sum_debit-ori_sum_credit)], divider=True)
                        else:
                            t.add_row(["", "Balance c/d", format_string(ori_sum_credit-ori_sum_debit), ""], divider=True)
                    cls()
                    print(t)
                elif options=="This Week":
                    ori_sum_debit=ori_sum_credit=0
                    start_of_week = datetime.now() - timedelta(days=datetime.now().weekday())
                    end_of_week = start_of_week + timedelta(days=6)
                    t.title=f"{accounts} Account for the week {start_of_week.date()} to {end_of_week.date()}"
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{accounts}' or credit_account='{accounts}') and (trx_date<'{start_of_week}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        for trx in myresult:
                            if trx[1]==accounts:
                                ori_sum_debit+=trx[4]
                            else:
                                ori_sum_credit+=trx[4]
                        
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{accounts}' or credit_account='{accounts}') and (trx_date between '{start_of_week}' and '{end_of_week}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        sum_debit, sum_credit = 0, 0
                        if ori_sum_debit>ori_sum_credit and ori_sum_credit!=0:
                            t.add_row(["", "Balance b/d", format_string(ori_sum_debit-ori_sum_credit), ""], divider=True)
                            sum_debit+=ori_sum_debit-ori_sum_credit
                        elif ori_sum_credit>ori_sum_debit and ori_sum_credit!=0:
                            t.add_row(["", "Balance b/d", "", format_string(ori_sum_credit-ori_sum_debit)], divider=True)
                            sum_credit+=ori_sum_credit-ori_sum_debit
                        for trx in myresult:
                            if trx[1]==accounts:
                                t.add_row([trx[0], trx[2], format_string(int(trx[4])), ""])
                                sum_debit+=trx[4]
                                pass
                            else:
                                t.add_row([trx[0], trx[1], "", format_string(int(trx[4]))])
                                sum_credit+=trx[4]
                                pass
                        if sum_debit>sum_credit:
                            t.add_row(["", "Balance c/d", "", format_string(sum_debit-sum_credit)], divider=True)
                            t.add_row(["", "Total", format_string(sum_debit), format_string(sum_debit)])
                            
                        elif sum_debit<sum_credit:
                            t.add_row(["", "Balance c/d", format_string(sum_credit-sum_debit), ""], divider=True)
                            t.add_row(["", "Total", format_string(sum_credit), format_string(sum_credit)])
                        
                        else:
                            t.add_row(["", "", "", ""], divider=True)
                            t.add_row(["", "", format_string(sum_debit), format_string(sum_credit)])
                    else:
                        if ori_sum_debit>ori_sum_credit:
                            t.add_row(["", "Balance c/d", "", format_string(ori_sum_debit-ori_sum_credit)], divider=True)
                        else:
                            t.add_row(["", "Balance c/d", format_string(ori_sum_credit-ori_sum_debit), ""], divider=True)
                    cls()
                    print(t)
                elif options=="This Month":
                    ori_sum_debit=ori_sum_credit=0
                    start_of_month = datetime.now().replace(day=1)
                    end_of_month = datetime.now().replace(day=calendar.monthrange(datetime.now().year, datetime.now().month)[1])
                    t.title = f"{accounts} Account from {start_of_month.date()} to {end_of_month.date()}"
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{accounts}' or credit_account='{accounts}') and (trx_date<'{start_of_month}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        for trx in myresult:
                            if trx[1]==accounts:
                                ori_sum_debit+=trx[4]
                            else:
                                ori_sum_credit+=trx[4]
                        
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{accounts}' or credit_account='{accounts}') and (trx_date between '{start_of_month}' and '{end_of_month}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        sum_debit, sum_credit = 0, 0
                        if ori_sum_debit>ori_sum_credit and ori_sum_credit!=0:
                            t.add_row(["", "Balance b/d", format_string(ori_sum_debit-ori_sum_credit), ""], divider=True)
                            sum_debit+=ori_sum_debit-ori_sum_credit
                        elif ori_sum_credit>ori_sum_debit and ori_sum_credit!=0:
                            t.add_row(["", "Balance b/d", "", format_string(ori_sum_credit-ori_sum_debit)], divider=True)
                            sum_credit+=ori_sum_credit-ori_sum_debit
                        for trx in myresult:
                            if trx[1]==accounts:
                                t.add_row([trx[0], trx[2], format_string(int(trx[4])), ""])
                                sum_debit+=trx[4]
                                pass
                            else:
                                t.add_row([trx[0], trx[1], "", format_string(int(trx[4]))])
                                sum_credit+=trx[4]
                                pass
                        if sum_debit>sum_credit:
                            t.add_row(["", "Balance c/d", "", format_string(sum_debit-sum_credit)], divider=True)
                            t.add_row(["", "Total", format_string(sum_debit), format_string(sum_debit)])
                            
                        elif sum_debit<sum_credit:
                            t.add_row(["", "Balance c/d", format_string(sum_credit-sum_debit), ""], divider=True)
                            t.add_row(["", "Total", format_string(sum_credit), format_string(sum_credit)])
                        
                        else:
                            t.add_row(["", "", "", ""], divider=True)
                            t.add_row(["", "", format_string(sum_debit), format_string(sum_credit)])
                    else:
                        if ori_sum_debit>ori_sum_credit:
                            t.add_row(["", "Balance c/d", "", format_string(ori_sum_debit-ori_sum_credit)], divider=True)
                        else:
                            t.add_row(["", "Balance c/d", format_string(ori_sum_credit-ori_sum_debit), ""], divider=True)
                    cls()
                    print(t)
                elif options=="Last Month":
                    ori_sum_debit=ori_sum_credit=0
                    end_of_month = datetime.now().replace(day=1) - timedelta(days=1)
                    start_of_month = end_of_month.replace(day=1)
                    t.title = f"{accounts} Account from {start_of_month.date()} to {end_of_month.date()}"
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{accounts}' or credit_account='{accounts}') and (trx_date<'{start_of_month}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        for trx in myresult:
                            if trx[1]==accounts:
                                ori_sum_debit+=trx[4]
                            else:
                                ori_sum_credit+=trx[4]
                        
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{accounts}' or credit_account='{accounts}') and (trx_date between '{start_of_month}' and '{end_of_month}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        sum_debit, sum_credit = 0, 0
                        if ori_sum_debit>ori_sum_credit and ori_sum_credit!=0:
                            t.add_row(["", "Balance b/d", format_string(ori_sum_debit-ori_sum_credit), ""], divider=True)
                            sum_debit+=ori_sum_debit-ori_sum_credit
                        elif ori_sum_credit>ori_sum_debit and ori_sum_credit!=0:
                            t.add_row(["", "Balance b/d", "", format_string(ori_sum_credit-ori_sum_debit)], divider=True)
                            sum_credit+=ori_sum_credit-ori_sum_debit
                        for trx in myresult:
                            if trx[1]==accounts:
                                t.add_row([trx[0], trx[2], format_string(int(trx[4])), ""])
                                sum_debit+=trx[4]
                                pass
                            else:
                                t.add_row([trx[0], trx[1], "", format_string(int(trx[4]))])
                                sum_credit+=trx[4]
                                pass
                        if sum_debit>sum_credit:
                            t.add_row(["", "Balance c/d", "", format_string(sum_debit-sum_credit)], divider=True)
                            t.add_row(["", "Total", format_string(sum_debit), format_string(sum_debit)])
                            
                        elif sum_debit<sum_credit:
                            t.add_row(["", "Balance c/d", format_string(sum_credit-sum_debit), ""], divider=True)
                            t.add_row(["", "Total", format_string(sum_credit), format_string(sum_credit)])
                        
                        else:
                            t.add_row(["", "", "", ""], divider=True)
                            t.add_row(["", "", format_string(sum_debit), format_string(sum_credit)])
                    else:
                        if ori_sum_debit>ori_sum_credit:
                            t.add_row(["", "Balance c/d", "", format_string(ori_sum_debit-ori_sum_credit)], divider=True)
                        else:
                            t.add_row(["", "Balance c/d", format_string(ori_sum_credit-ori_sum_debit), ""], divider=True)
                    cls()
                    print(t)
                elif options=="Calender Year till date":
                    ori_sum_debit=ori_sum_credit=0
                    start_of_month = datetime.now().replace(month=1, day=1)
                    end_of_month = datetime.now()
                    t.title = f"{accounts} Account from {start_of_month.date()} to {end_of_month.date()}"
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{accounts}' or credit_account='{accounts}') and (trx_date<'{start_of_month}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        for trx in myresult:
                            if trx[1]==accounts:
                                ori_sum_debit+=trx[4]
                            else:
                                ori_sum_credit+=trx[4]
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{accounts}' or credit_account='{accounts}') and (trx_date between '{start_of_month}' and '{end_of_month}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        sum_debit, sum_credit = 0, 0
                        if ori_sum_debit>ori_sum_credit and ori_sum_credit!=0:
                            t.add_row(["", "Balance b/d", format_string(ori_sum_debit-ori_sum_credit), ""], divider=True)
                            sum_debit+=ori_sum_debit-ori_sum_credit
                        elif ori_sum_credit>ori_sum_debit and ori_sum_credit!=0:
                            t.add_row(["", "Balance b/d", "", format_string(ori_sum_credit-ori_sum_debit)], divider=True)
                            sum_credit+=ori_sum_credit-ori_sum_debit
                        for trx in myresult:
                            if trx[1]==accounts:
                                t.add_row([trx[0], trx[2], format_string(int(trx[4])), ""])
                                sum_debit+=trx[4]
                                pass
                            else:
                                t.add_row([trx[0], trx[1], "", format_string(int(trx[4]))])
                                sum_credit+=trx[4]
                                pass
                        if sum_debit>sum_credit:
                            t.add_row(["", "Balance c/d", "", format_string(sum_debit-sum_credit)], divider=True)
                            t.add_row(["", "Total", format_string(sum_debit), format_string(sum_debit)])
                            
                        elif sum_debit<sum_credit:
                            t.add_row(["", "Balance c/d", format_string(sum_credit-sum_debit), ""], divider=True)
                            t.add_row(["", "Total", format_string(sum_credit), format_string(sum_credit)])
                        
                        else:
                            t.add_row(["", "", "", ""], divider=True)
                            t.add_row(["", "", format_string(sum_debit), format_string(sum_credit)])
                    else:
                        if ori_sum_debit>ori_sum_credit:
                            t.add_row(["", "Balance c/d", "", format_string(ori_sum_debit-ori_sum_credit)], divider=True)
                        else:
                            t.add_row(["", "Balance c/d", format_string(ori_sum_credit-ori_sum_debit), ""], divider=True)
                    cls()
                    print(t)
                elif options=="Accounting Year till date":
                    ori_sum_debit=ori_sum_credit=0
                    start_of_month = datetime.now().replace(year=datetime.now().year - 1, month=4, day=1)
                    end_of_month = datetime.now()
                    t.title = f"{accounts} Account from {start_of_month.date()} to {end_of_month.date()}"
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{accounts}' or credit_account='{accounts}') and (trx_date<'{start_of_month}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        for trx in myresult:
                            if trx[1]==accounts:
                                ori_sum_debit+=trx[4]
                            else:
                                ori_sum_credit+=trx[4]
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{accounts}' or credit_account='{accounts}') and (trx_date between '{start_of_month}' and '{end_of_month}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        sum_debit, sum_credit = 0, 0
                        if ori_sum_debit>ori_sum_credit and ori_sum_credit!=0:
                            t.add_row(["", "Balance b/d", format_string(ori_sum_debit-ori_sum_credit), ""], divider=True)
                            sum_debit+=ori_sum_debit-ori_sum_credit
                        elif ori_sum_credit>ori_sum_debit and ori_sum_credit!=0:
                            t.add_row(["", "Balance b/d", "", format_string(ori_sum_credit-ori_sum_debit)], divider=True)
                            sum_credit+=ori_sum_credit-ori_sum_debit
                        for trx in myresult:
                            if trx[1]==accounts:
                                t.add_row([trx[0], trx[2], format_string(int(trx[4])), ""])
                                sum_debit+=trx[4]
                                pass
                            else:
                                t.add_row([trx[0], trx[1], "", format_string(int(trx[4]))])
                                sum_credit+=trx[4]
                                pass
                        if sum_debit>sum_credit:
                            t.add_row(["", "Balance c/d", "", format_string(sum_debit-sum_credit)], divider=True)
                            t.add_row(["", "Total", format_string(sum_debit), format_string(sum_debit)])
                            
                        elif sum_debit<sum_credit:
                            t.add_row(["", "Balance c/d", format_string(sum_credit-sum_debit), ""], divider=True)
                            t.add_row(["", "Total", format_string(sum_credit), format_string(sum_credit)])
                        
                        else:
                            t.add_row(["", "", "", ""], divider=True)
                            t.add_row(["", "", format_string(sum_debit), format_string(sum_credit)])
                    else:
                        if ori_sum_debit>ori_sum_credit:
                            t.add_row(["", "Balance c/d", "", format_string(ori_sum_debit-ori_sum_credit)], divider=True)
                        else:
                            t.add_row(["", "Balance c/d", format_string(ori_sum_credit-ori_sum_debit), ""], divider=True)
                    cls()
                    print(t)
                elif options=="This Quarter":
                    ori_sum_debit=ori_sum_credit=0
                    today = datetime.now()
                    nearest_quarter_start = {1:1, 2:1, 3:1, 4:4, 5:4, 6:4, 7:7, 8:7, 9:7, 10:10, 11:10, 12:10}
                    nearest_quarter_end = {1:3, 2:3, 3:3, 4:6, 5:6, 6:6, 7:9, 8:9, 9:9, 10:12, 11:12, 12:12}
                    last_day = {3:31, 6:30, 9:30, 12:31}
                    start_of_month = today.replace(day=1, month=nearest_quarter_start[today.month])
                    end_of_month = today.replace(month=nearest_quarter_end[today.month], day=last_day[nearest_quarter_end[today.month]])
                    t.title = f"{accounts} Account from {start_of_month.date()} to {end_of_month.date()}"
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{accounts}' or credit_account='{accounts}') and (trx_date<'{start_of_month}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        for trx in myresult:
                            if trx[1]==accounts:
                                ori_sum_debit+=trx[4]
                            else:
                                ori_sum_credit+=trx[4]
                        
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{accounts}' or credit_account='{accounts}') and (trx_date between '{start_of_month}' and '{end_of_month}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        sum_debit, sum_credit = 0, 0
                        if ori_sum_debit>ori_sum_credit and ori_sum_credit!=0:
                            t.add_row(["", "Balance b/d", format_string(ori_sum_debit-ori_sum_credit), ""], divider=True)
                            sum_debit+=ori_sum_debit-ori_sum_credit
                        elif ori_sum_credit>ori_sum_debit and ori_sum_credit!=0:
                            t.add_row(["", "Balance b/d", "", format_string(ori_sum_credit-ori_sum_debit)], divider=True)
                            sum_credit+=ori_sum_credit-ori_sum_debit
                        for trx in myresult:
                            if trx[1]==accounts:
                                t.add_row([trx[0], trx[2], format_string(int(trx[4])), ""])
                                sum_debit+=trx[4]
                                pass
                            else:
                                t.add_row([trx[0], trx[1], "", format_string(int(trx[4]))])
                                sum_credit+=trx[4]
                                pass
                        if sum_debit>sum_credit:
                            t.add_row(["", "Balance c/d", "", format_string(sum_debit-sum_credit)], divider=True)
                            t.add_row(["", "Total", format_string(sum_debit), format_string(sum_debit)])
                            
                        elif sum_debit<sum_credit:
                            t.add_row(["", "Balance c/d", format_string(sum_credit-sum_debit), ""], divider=True)
                            t.add_row(["", "Total", format_string(sum_credit), format_string(sum_credit)])
                        
                        else:
                            t.add_row(["", "", "", ""], divider=True)
                            t.add_row(["", "", format_string(sum_debit), format_string(sum_credit)])
                    else:
                        if ori_sum_debit>ori_sum_credit:
                            t.add_row(["", "Balance c/d", "", format_string(ori_sum_debit-ori_sum_credit)], divider=True)
                        else:
                            t.add_row(["", "Balance c/d", format_string(ori_sum_credit-ori_sum_debit), ""], divider=True)
                    cls()
                    print(t)
                elif options=="Last Quarter":
                    ori_sum_debit=ori_sum_credit=0
                    today = datetime.now()
                    nearest_quarter_start = {1:10, 2:10, 3:10, 4:1, 5:1, 6:1, 7:4, 8:4, 9:4, 10:7, 11:7, 12:7}
                    nearest_quarter_end = {1:12, 2:12, 3:12, 4:3, 5:3, 6:3, 7:6, 8:6, 9:6, 10:9, 11:9, 12:9}
                    last_day = {3:31, 6:30, 9:30, 12:31}
                    start_of_month = today.replace(day=1, month=nearest_quarter_start[today.month])
                    end_of_month = today.replace(month=nearest_quarter_end[today.month], day=last_day[nearest_quarter_end[today.month]])
                    if start_of_month.month in [10,11,12]:
                        year_ = start_of_month.year
                        start_of_month = start_of_month.replace(year=year_-1)
                        end_of_month = end_of_month.replace(year=year_-1)
                    t.title = f"{accounts} Account from {start_of_month.date()} to {end_of_month.date()}"
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{accounts}' or credit_account='{accounts}') and (trx_date<'{start_of_month}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        for trx in myresult:
                            if trx[1]==accounts:
                                ori_sum_debit+=trx[4]
                            else:
                                ori_sum_credit+=trx[4]
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{accounts}' or credit_account='{accounts}') and (trx_date between '{start_of_month}' and '{end_of_month}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        sum_debit, sum_credit = 0, 0
                        if ori_sum_debit>ori_sum_credit and ori_sum_credit!=0:
                            t.add_row(["", "Balance b/d", format_string(ori_sum_debit-ori_sum_credit), ""], divider=True)
                            sum_debit+=ori_sum_debit-ori_sum_credit
                        elif ori_sum_credit>ori_sum_debit and ori_sum_credit!=0:
                            t.add_row(["", "Balance b/d", "", format_string(ori_sum_credit-ori_sum_debit)], divider=True)
                            sum_credit+=ori_sum_credit-ori_sum_debit
                        for trx in myresult:
                            if trx[1]==accounts:
                                t.add_row([trx[0], trx[2], format_string(int(trx[4])), ""])
                                sum_debit+=trx[4]
                                pass
                            else:
                                t.add_row([trx[0], trx[1], "", format_string(int(trx[4]))])
                                sum_credit+=trx[4]
                                pass
                        if sum_debit>sum_credit:
                            t.add_row(["", "Balance c/d", "", format_string(sum_debit-sum_credit)], divider=True)
                            t.add_row(["", "Total", format_string(sum_debit), format_string(sum_debit)])
                            
                        elif sum_debit<sum_credit:
                            t.add_row(["", "Balance c/d", format_string(sum_credit-sum_debit), ""], divider=True)
                            t.add_row(["", "Total", format_string(sum_credit), format_string(sum_credit)])
                        
                        else:
                            t.add_row(["", "", "", ""], divider=True)
                            t.add_row(["", "", format_string(sum_debit), format_string(sum_credit)])
                    else:
                        if ori_sum_debit>ori_sum_credit:
                            t.add_row(["", "Balance c/d", "", format_string(ori_sum_debit-ori_sum_credit)], divider=True)
                        else:
                            t.add_row(["", "Balance c/d", format_string(ori_sum_credit-ori_sum_debit), ""], divider=True)
                    # cls()
                    print(t)
                else:
                    ori_sum_debit=ori_sum_credit=0
                    start_date = input("Enter the start date in YYYY-MM-DD format, include the dashes in between")
                    end_date = input("Enter the end date in YYYY-MM-DD format, include the dashes in between")
                    t.title = f"{accounts} Account for the Range {start_date}-{end_date}"
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{accounts}' or credit_account='{accounts}') and (trx_date<'{start_date}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        for trx in myresult:
                            if trx[1]==accounts:
                                ori_sum_debit+=trx[4]
                            else:
                                ori_sum_credit+=trx[4]
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{accounts}' or credit_account='{accounts}') and (trx_date between '{start_date}' and '{end_date}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        sum_debit, sum_credit = 0, 0
                        if ori_sum_debit>ori_sum_credit and ori_sum_credit!=0:
                            t.add_row(["", "Balance b/d", format_string(ori_sum_debit-ori_sum_credit), ""], divider=True)
                            sum_debit+=ori_sum_debit-ori_sum_credit
                        elif ori_sum_credit>ori_sum_debit and ori_sum_credit!=0:
                            t.add_row(["", "Balance b/d", "", format_string(ori_sum_credit-ori_sum_debit)], divider=True)
                            sum_credit+=ori_sum_credit-ori_sum_debit
                        for trx in myresult:
                            if trx[1]==accounts:
                                t.add_row([trx[0], trx[2], format_string(int(trx[4])), ""])
                                sum_debit+=trx[4]
                                pass
                            else:
                                t.add_row([trx[0], trx[1], "", format_string(int(trx[4]))])
                                sum_credit+=trx[4]
                                pass
                        if sum_debit>sum_credit:
                            t.add_row(["", "Balance c/d", "", format_string(sum_debit-sum_credit)], divider=True)
                            t.add_row(["", "Total", format_string(sum_debit), format_string(sum_debit)])
                            
                        elif sum_debit<sum_credit:
                            t.add_row(["", "Balance c/d", format_string(sum_credit-sum_debit), ""], divider=True)
                            t.add_row(["", "Total", format_string(sum_credit), format_string(sum_credit)])
                        
                        else:
                            t.add_row(["", "", "", ""], divider=True)
                            t.add_row(["", "", format_string(sum_debit), format_string(sum_credit)])
                    else:
                        if ori_sum_debit>ori_sum_credit:
                            t.add_row(["", "Balance c/d", "", format_string(ori_sum_debit-ori_sum_credit)], divider=True)
                        else:
                            t.add_row(["", "Balance c/d", format_string(ori_sum_credit-ori_sum_debit), ""], divider=True)
                    cls()
                    print(t)
    elif option=="Journal":
        print("Note! Finex supports only Simple Journal Entries now. We'll introduce support for Compound Journal Entries in the future\n\n")
        mycursor.execute(f"SELECT account_name from coa where orgID={orgData[0][0]}")
        myresult=mycursor.fetchall()
        accounts = []
        if myresult==[]:
            print("You have not created any Ledger Account. Create an account to pass a journal entry")
            continue
        else:
            for account in myresult:
                accounts.append(account[0])
            date_ = input("Enter the date of the transaction in YYYY-MM-DD format, including the dashes")
            print("Select the account to be debited")
            debit_acc = accounts[cutie.select(accounts)]
            accounts.remove(debit_acc)
            print("Select the account to be credited")
            credit_acc = accounts[cutie.select(accounts)]
            narration = input("Enter a narration for the transaction (OPTIONAL)")
            amount = float(input("Enter the amount of the transaction"))
            mycursor.execute(f"SELECT max(trx_id) from journal where orgID={orgData[0][0]}")
            trx_id = mycursor.fetchall()[0][0]
            if trx_id==None:
                trx_id=1
            else:
                trx_id+=1
            
            mycursor.execute(f"INSERT INTO journal VALUES({orgData[0][0]}, '{date_}', '{debit_acc}', '{credit_acc}', '{narration}', {amount}, {trx_id})")
            mydb.commit()
            cls()
            print("Journalised successfully!\n")
    elif option=="Fixed Assets Management":
        mycursor.execute(f"SELECT account_name from fixed_assets where orgID={orgData[0][0]}")
        myresult=mycursor.fetchall()
        if myresult==[]:
            mycursor.execute(f"SELECT account_name from coa where orgID={orgData[0][0]} and category in ('A', 'L', 'C')")
            myresult=mycursor.fetchall()
            accounts = []
            if myresult==[]:
                print("You have not added any ledger accounts for financing the Asset. Add an account and return back here")
            else:
                for account in myresult:
                    accounts.append(account[0])
                ch = cutie.prompt_yes_or_no("You have not added any fixed assets for management. Add an asset?")
                if ch==True:
                    cls()
                    account_name = input("Enter the name of the Asset")
                    mycursor.execute(f"SELECT count(account_name) from fixed_assets where account_name='{account_name}'")
                    myresult=mycursor.fetchall()
                    num = myresult[0][0]
                    if num==0:
                        account_name+=f" ({str(1)})"
                    else:
                        num+=1
                        new_num = str(num)
                        account_name+=f" ({new_num})"
                    lifespan = int(cutie.get_number("How much is the estimated life span of the asset", 1))
                    ch_1 = cutie.prompt_yes_or_no("Is the asset subjected to higher repairs and maintenance when it nears it's lifespan?")
                    ch_2 = cutie.prompt_yes_or_no("Is the asset exposed to higher risks of obsolescense?")
                    if ch_1==True and ch_2==True:
                        print("We determined that the Written Down Value Method is best for the Asset\n-> The Written Down Value Method (WDV) charges higher depreciation in an asset's early life, when it's work efficiency is at maximum.\n-> It is used by Income Tax Authorities\n-> Depreciation goes on reducing year to year\n.-> The amount of depreciation and the repairs amount to the P&L account will be uniform year-to-year.\n\n")
                        ch = cutie.prompt_yes_or_no("Agree with WDV or use SLM?")
                        if ch==True:
                            method = "WDV"
                        else:
                            method = "SLM"
                    else:
                        print("We determined that the Straight Line Method is best for the Asset\n-> The Straight Line Method (SLM) charges equal amount of depreciation to an asset \n-> It is suitable for assets who does not have much repair charges and for those assets whose loss due to obsolescense is low\n\n")
                        ch = cutie.prompt_yes_or_no("Agree with SLM or use WDV?")
                        if ch==True:
                            method = "SLM"
                        else:
                            method = "WDV"                    
                    date_ = input("Enter the date of the transaction in YYYY-MM-DD format, including the dashes")
                    print("How did you finance the Asset")
                    credit_acc = accounts[cutie.select(accounts)]
                    narration = input("Enter a narration for the transaction (OPTIONAL)")
                    amount = float(input("Enter the amount of the transaction"))
                    ch = int(input("Enter the estimated scrap value of the asset"))
                    if method=="SLM":
                        dep = (amount-ch)/lifespan
                        per = (dep/amount)*100
                    else:
                        dep = 1-(ch/amount)**(1/lifespan)
                        per = (dep/amount)*100
                    mycursor.execute(f"INSERT INTO fixed_assets VALUES({orgData[0][0]}, '{account_name}', {lifespan}, '{method}', {amount}, {per}, '{date_}')")
                    mycursor.execute(f"INSERT INTO coa VALUES({orgData[0][0]}, '{account_name}', 'A')")
                    mycursor.execute(f"SELECT max(trx_id) from journal where orgID={orgData[0][0]}")
                    trx_id = mycursor.fetchall()[0][0]
                    if trx_id==None:
                        trx_id=1
                    else:
                        trx_id+=1
                    mycursor.execute(f"INSERT INTO journal VALUES({orgData[0][0]}, '{date_}', '{account_name}', '{credit_acc}', '{narration}', {amount}, {trx_id})")
                    mydb.commit()
                    print("Asset account created successfully")
        else:
            print(f"You have {len(myresult)} assets")
            while True:
                mycursor.execute(f"SELECT account_name from fixed_assets where orgID={orgData[0][0]}")
                myresult=mycursor.fetchall()
                print(f"Manage assets")
                assets = []
                for asset in myresult:
                    assets.append(asset[0])
                assets.append('Back')
                asset = assets[cutie.select(assets)]
                if asset!="Back":
                    cls()
                    mycursor.execute(f"SELECT account_name, ls, method, pp, dep, dp from fixed_assets where orgID={orgData[0][0]} and account_name='{asset}'")                
                    asset_details=mycursor.fetchall()
                    print("Name of the Asset:", asset_details[0][0])
                    print("Expected Life Span of the Asset:", asset_details[0][1], "years")
                    print("Method of charging Depreciation:", asset_details[0][2])
                    print("Purchase price of the Asset:", asset_details[0][3])
                    ori_sum_debit=ori_sum_credit=0
                    todayDate = date.today()
                    trx_date = ""
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{asset}' or credit_account='{asset}') and (trx_date<'{todayDate}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        for trx in myresult:
                            if trx[1]==asset:
                                ori_sum_debit+=trx[4]
                            else:
                                ori_sum_credit+=trx[4]
                    mycursor.execute(f"SELECT trx_date, debit_account, credit_account, narration, amount, trx_id from journal where orgID={orgData[0][0]} and (debit_account='{asset}' or credit_account='{asset}') and (trx_date='{todayDate}') order by trx_date")
                    myresult = mycursor.fetchall()
                    if myresult!=[]:
                        sum_debit, sum_credit = 0, 0
                        if ori_sum_debit>ori_sum_credit and ori_sum_credit!=0:
                            sum_debit+=ori_sum_debit-ori_sum_credit
                        elif ori_sum_credit>ori_sum_debit and ori_sum_credit!=0:
                            sum_credit+=ori_sum_credit-ori_sum_debit
                        for trx in myresult:
                            if trx[1]==asset:
                                sum_debit+=trx[4]
                                pass
                            else:
                                sum_credit+=trx[4]
                                pass
                        if sum_debit>sum_credit:
                            balance = sum_debit-sum_credit
                            
                        elif sum_debit<sum_credit:
                            balance = sum_credit-sum_debit
                        else:
                            balance = 0
                    else:
                        if ori_sum_debit>ori_sum_credit:
                            balance = ori_sum_debit-ori_sum_credit
                        else:
                            balance = ori_sum_credit-ori_sum_debit
                    print("Current book value of the Asset:", balance)
                    today = datetime.now()
                    if asset_details[0][2]=="SLM":
                        start_of_month = (datetime.now().replace(year=datetime.now().year - 1, month=4, day=1)).date()
                        end_of_month = (today.replace(day=31, month=3)).date()
                        mycursor.execute(f"SELECT '{asset_details[0][-1]}' between '{start_of_month}' and '{end_of_month}'")
                        myresult = mycursor.fetchall()
                        if myresult[0][0]==1:
                            dp = (asset_details[0][-1]).month
                            today = (datetime.now()).month
                            if dp==today:
                                months = 1
                            else:
                                months = (today-dp)+1
                            dep = int(asset_details[0][3]*(asset_details[0][4]/100)*months/12)
                        else:
                            dep = int(asset_details[0][3]*(asset_details[0][4]/100))
                    else:
                        start_of_month = (datetime.now().replace(year=datetime.now().year - 1, month=4, day=1)).date()
                        end_of_month = (today.replace(day=31, month=3)).date()
                        mycursor.execute(f"SELECT '{asset_details[0][-1]}' between '{start_of_month}' and '{end_of_month}'")
                        myresult = mycursor.fetchall()
                        if myresult[0][0]==1:
                            dp = (asset_details[0][-1]).month
                            today = (datetime.now()).month
                            if dp==today:
                                months = 1
                            else:
                                months = (today-dp)+1
                            dep = int(asset_details[0][3]*(asset_details[0][4]/100)*months/12)
                        else:
                            dep = int(balance*(asset_details[0][4]/100))
                    print("Amount of depreciation to be charged:", dep)
                    today = datetime.now()
                    if today.date() == 31 and today.month==3:
                        try:
                            mycursor.execute(f"INSERT INTO coa VALUES({orgData[0][0]}, 'Depreciation', 'E')")
                        except:
                            pass
                        narration = f"Being depreciation for {asset_details[0][0]} for the accounting year {today.year-1}-{today.year}"
                        amount = dep
                        mycursor.execute(f"SELECT max(trx_id) from journal where orgID={orgData[0][0]}")
                        trx_id = mycursor.fetchall()[0][0]
                        if trx_id==None:
                            trx_id=1
                        else:
                            trx_id+=1
                        mycursor.execute(f"INSERT INTO journal VALUES({orgData[0][0]}, '{today.date()}', 'Depreciation', '{asset_details[0][0]}', '{narration}', {amount}, {trx_id})")
                        mydb.commit()
                    else:
                        print("Finex will charge depreciation to asset on 31st March")
                else:
                    cls()
                    break
    elif option=="Exit":
        exit()

